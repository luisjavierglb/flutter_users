package com.example.users_app.activitiesimport android.annotation.SuppressLintimport android.os.Bundleimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.BorderStrokeimport androidx.compose.foundation.Imageimport androidx.compose.foundation.borderimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Refreshimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.Iconimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TopAppBarimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.SolidColorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.lifecycle.ViewModelProviderimport coil.compose.rememberImagePainterimport com.example.users_app.models.Userimport com.example.users_app.view_models.UserViewModelimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass ComposeActivity : ComponentActivity() {  private lateinit var viewModel: UserViewModel  override fun onCreate(savedInstanceState: Bundle?) {    super.onCreate(savedInstanceState)    viewModel = ViewModelProvider(this)[UserViewModel::class.java]    setContent {      UserListScreen(viewModel)    }    fetchUsers()  }  private fun fetchUsers() {    CoroutineScope(Dispatchers.Main).launch {      viewModel.fetchUsers()    }  }}@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")@OptIn(ExperimentalMaterial3Api::class)@Composablefun UserListScreen(viewModel: UserViewModel) {  val usersState = remember {    mutableStateOf<List<User>>(emptyList())  }  LaunchedEffect(Unit) {    viewModel.users.collect { users ->      usersState.value = users    }  }  Scaffold(    topBar = {      TopAppBar(        title = { Text("Users Page Compose") }      )    },    floatingActionButton = {      FloatingActionButton(        onClick = {          CoroutineScope(Dispatchers.Main).launch {            viewModel.fetchUsers()          }        },        shape = CircleShape,      ) {        Icon(          imageVector = Icons.Default.Refresh,          contentDescription = "Refresh",        )      }    }  ) {    UserList(users = usersState.value)  }}@Composablefun UserList(users: List<User>?) {  LazyColumn(    modifier = Modifier.padding(16.dp),    contentPadding = PaddingValues(      bottom = 4.dp,      top = 64.dp,    )  ) {    items(users ?: emptyList()) { user ->      UserListItem(user = user)    }  }}@Composablefun UserListItem(user: User) {  Row(    modifier = Modifier.fillMaxWidth()      .padding(4.dp)      .border(BorderStroke(2.dp, SolidColor(Color.Gray)))      .padding(16.dp)  ) {    val painter = rememberImagePainter(      data = user.picture.medium,      builder = {        crossfade(true)      }    )    Image(      painter = painter,      contentDescription = null,      contentScale = ContentScale.Crop,      modifier = Modifier        .size(64.dp)        .clip(RoundedCornerShape(8.dp))    )    Spacer(modifier = Modifier.width(16.dp))    Column {      Text(text = user.name.fullName, fontWeight = FontWeight.Bold)      Text(text = user.email)    }  }}